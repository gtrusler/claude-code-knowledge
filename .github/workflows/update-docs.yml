name: Update Claude Code Docs

on:
  schedule:
    - cron: '0 6 * * *'
  workflow_dispatch:
  push:
    branches: [ main ]
    paths:
      - '.github/workflows/update-docs.yml'

permissions:
  contents: write

jobs:
  update-docs:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        pip install requests beautifulsoup4 markdownify
    
    - name: Scrape documentation
      run: |
        cat > scraper.py << 'EOF'
        import requests
        from bs4 import BeautifulSoup
        import markdownify
        from datetime import datetime
        
        def scrape_claude_docs():
            base_url = "https://docs.anthropic.com/en/docs/claude-code"
            
            try:
                response = requests.get(base_url, timeout=30, headers={
                    'User-Agent': 'Mozilla/5.0 (compatible; Claude-Code-Docs-Scraper/1.0)'
                })
                response.raise_for_status()
                
                soup = BeautifulSoup(response.text, 'html.parser')
                
                # Try multiple selectors for documentation content
                content = None
                selectors = [
                    'main', 
                    'article', 
                    '[role="main"]', 
                    '.docs-content', 
                    '.content',
                    '.documentation',
                    '#content',
                    '[data-testid="content"]',
                    '.prose',
                    '.markdown-body'
                ]
                
                for selector in selectors:
                    elements = soup.select(selector)
                    if elements:
                        # Pick the element with the most text content
                        content = max(elements, key=lambda e: len(e.get_text(strip=True)))
                        if len(content.get_text(strip=True)) > 500:  # Reasonable minimum
                            break
                
                if not content or len(content.get_text(strip=True)) < 500:
                    # Fallback: look for the largest text-containing element
                    all_elements = soup.find_all(['div', 'section', 'main', 'article'])
                    text_elements = [(e, len(e.get_text(strip=True))) for e in all_elements if len(e.get_text(strip=True)) > 500]
                    if text_elements:
                        content = max(text_elements, key=lambda x: x[1])[0]
                
                if not content:
                    return f"# Claude Code Official Documentation\n\n*Last updated: {datetime.now().strftime('%Y-%m-%d %H:%M UTC')}*\n\nUnable to scrape content - page structure may have changed."
                
                # Remove style and script tags before conversion
                for element in content.find_all(['style', 'script', 'noscript']):
                    element.decompose()
                
                # Remove elements that are likely navigation or UI
                for element in content.find_all(['nav', 'header', 'footer', 'aside']):
                    element.decompose()
                
                # Remove elements with certain classes that indicate non-content
                for element in content.find_all(class_=['sidebar', 'navigation', 'menu', 'breadcrumb']):
                    element.decompose()
                
                # Convert to markdown with better options
                markdown = markdownify.markdownify(
                    str(content), 
                    heading_style="ATX",
                    strip=['script', 'style', 'meta', 'link'],
                    convert=['p', 'div', 'span', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 
                            'ul', 'ol', 'li', 'a', 'code', 'pre', 'blockquote', 
                            'strong', 'em', 'b', 'i']
                )
                
                # Clean up the markdown
                # Remove excessive newlines
                import re
                markdown = re.sub(r'\n{3,}', '\n\n', markdown)
                # Remove style blocks that might have slipped through
                markdown = re.sub(r':root\s*{[^}]*}', '', markdown, flags=re.DOTALL)
                markdown = re.sub(r'@font-face\s*{[^}]*}', '', markdown, flags=re.DOTALL)
                # Remove any remaining CSS-like content
                markdown = re.sub(r'--[\w-]+:\s*[^;]+;', '', markdown)
                # Remove empty lines at the start
                markdown = markdown.lstrip()
                
                # Add header
                header = f"""# Claude Code Official Documentation

        *Last updated: {datetime.now().strftime('%Y-%m-%d %H:%M UTC')}*
        *Source: {base_url}*

        ---

        """
                return header + markdown
                
            except Exception as e:
                return f"# Claude Code Official Documentation\n\n*Last updated: {datetime.now().strftime('%Y-%m-%d %H:%M UTC')}*\n\nError: {str(e)}"
        
        if __name__ == "__main__":
            docs_content = scrape_claude_docs()
            
            with open('official/docs.md', 'w', encoding='utf-8') as f:
                f.write(docs_content)
            
            print("Documentation updated")
        EOF
        
        python scraper.py
    
    - name: Check for changes
      id: check
      run: |
        if git diff --quiet official/docs.md; then
          echo "No changes detected"
          echo "has_changes=false" >> $GITHUB_OUTPUT
        else
          echo "Changes detected"
          echo "has_changes=true" >> $GITHUB_OUTPUT
        fi
    
    - name: Commit and push changes
      if: steps.check.outputs.has_changes == 'true'
      run: |
        git config --local user.email "41898282+github-actions[bot]@users.noreply.github.com"
        git config --local user.name "github-actions[bot]"
        git add official/docs.md
        git commit -m "Update Claude Code documentation - $(date +'%Y-%m-%d')"
        git push
